# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PySide6.QtWidgets import QMainWindow
from PySide6 import QtCore, QtGui, QtWidgets

from header import Header
from mainbody import MainBody
from vest_config import VestConfig
from data_mgr import DataManager, DataType

class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()

        self.vest_config = VestConfig()
        self.data_mgr = DataManager("", self)

        self.setupUi()
        self.setWindowTitle("VEST")
        self.dark_theme_path = "dark_theme.qss"
        self.dark_theme = open(self.dark_theme_path).read()
        self.setStyleSheet(self.dark_theme)

        #self.vest_config.num_samples = len(self.data_mgr.nusc.sample)
        #self.vest_config.displayVestConfig()

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.vlytCentralWidget = QtWidgets.QVBoxLayout(self.centralwidget)
        self.vlytCentralWidget.setContentsMargins(0, 0, 0, 0)
        self.vlytCentralWidget.setSpacing(2)
        self.vlytCentralWidget.setObjectName("vlytCentralWidget")
        self.header = Header(parent=self.centralwidget)
        self.vlytCentralWidget.addWidget(self.header)
        
        self.main_body = MainBody(parent=self.centralwidget)

        self.vlytCentralWidget.addWidget(self.main_body)
        self.setCentralWidget(self.centralwidget)


        ### set menubar
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menubar.setNativeMenuBar(False)

        self.menu_vest = QtWidgets.QMenu("VEST", self.menubar)
        self.menu_configuration = QtWidgets.QMenu("Configuration", self.menu_vest)

        self.menu_file = QtWidgets.QMenu("File", self.menubar)
        self.menu_load_data = QtWidgets.QMenu("Load Data", self.menu_file)

        self.setMenuBar(self.menubar)

        
        self.action_about_vest = QtGui.QAction("About VEST", self)
        self.action_load_plugin = QtGui.QAction("Load Plugin", self)
        self.action_load_config = QtGui.QAction("Load Configuration", self)
        self.action_save_config = QtGui.QAction("Save Configuration", self)
        self.action_quit_app = QtGui.QAction("Quit Application", self)
        self.action_quit_app.triggered.connect(self.close)

        self.action_load_nuscenes = QtGui.QAction("Load Nuscenes", self)
        self.action_load_nuscenes.triggered.connect(lambda: self.loadData(DataType.NUSCENES))

        self.menu_vest.addAction(self.action_about_vest)
        self.menu_vest.addAction(self.action_load_plugin)
        self.menu_configuration.addAction(self.action_load_config)
        self.menu_configuration.addAction(self.action_save_config)
        self.menu_vest.addAction(self.menu_configuration.menuAction())
        self.menu_vest.addAction(self.action_quit_app)

        self.menu_load_data.addAction(self.action_load_nuscenes)
        self.menu_file.addAction(self.menu_load_data.menuAction())

        self.menubar.addAction(self.menu_vest.menuAction())
        self.menubar.addAction(self.menu_file.menuAction())

        ### set statusbar
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        ### set toolbar
        self.toolbar = QtWidgets.QToolBar(self)
        self.toolbar.setObjectName("toolbar")
        self.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolbar)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.header.retranslateUi(_translate)
        self.main_body.retranslateUi(_translate)

        # self.menuFile.setTitle(_translate("MainWindow", "File"))
        # self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        # self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        # self.menuVEST.setTitle(_translate("MainWindow", "VEST"))
        # self.menuConfiguration.setTitle(_translate("MainWindow", "Configuration"))
        # self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        # self.actionOpenFile.setText(_translate("MainWindow", "Open"))
        # self.actionQuit.setText(_translate("MainWindow", "Quit"))
        # self.actionAbout.setText(_translate("MainWindow", "UI Tour"))
        # self.actionAbout_VEST.setText(_translate("MainWindow", "About VEST"))
        # self.actionQuit_VEST.setText(_translate("MainWindow", "Quit VEST"))
        # self.load_plugins.setText(_translate("MainWindow", "Plugins"))
        # self.actionOpen.setText(_translate("MainWindow", "Open"))
        # self.actionSave.setText(_translate("MainWindow", "Save"))

        # SLIDABLE LEFT MENU /////////////////////
        self.header.menuBtn.clicked.connect(lambda: self.slideLeftMenu())

    ###################################################
    # Slide left menu
    ##################################################
    def slideLeftMenu(self):
        # Get current left menu width
        width = self.main_body.left_menu.frame_top.width()
        new_width = 0
        # If minimized
        if width >= 120:
            # Expand menu
            new_width = 30
            # print(1)
        # If maximized
        else:
            # Resotre menu
            new_width = 120
            # print(2)

        # Animate the transition
        self.animation_leftmenutop = QtCore.QPropertyAnimation(self.main_body.left_menu.frame_top, b"minimumWidth")  # Animate minimimWidth
        self.animation_leftmenutop.setDuration(250)
        # print("width:{}, new_width:{}".format(width, new_width))
        self.animation_leftmenutop.setStartValue(width)     # start value is the current menu width
        self.animation_leftmenutop.setEndValue(new_width)   # end value is the new menu width
        self.animation_leftmenutop.setEasingCurve(QtCore.QEasingCurve.InOutQuart)
        #self.animation.start()

        self.animation_leftmenubottom = QtCore.QPropertyAnimation(self.main_body.left_menu.frame_bottom, b"minimumWidth")  # Animate minimimWidth
        self.animation_leftmenubottom.setDuration(250)
        # print("width:{}, new_width:{}".format(width, new_width))
        self.animation_leftmenubottom.setStartValue(width)     # start value is the current menu width
        self.animation_leftmenubottom.setEndValue(new_width)   # end value is the new menu width
        self.animation_leftmenubottom.setEasingCurve(QtCore.QEasingCurve.InOutQuart)

        self.animation_group_leftmenu = QtCore.QParallelAnimationGroup()
        self.animation_group_leftmenu.addAnimation(self.animation_leftmenutop)
        self.animation_group_leftmenu.addAnimation(self.animation_leftmenubottom)

        self.animation_group_leftmenu.start()


    def loadData(self, data_type:DataType):
        if data_type == DataType.NUSCENES:
            self.loadNuscenes()
            
        
    def loadNuscenes(self):
        self.data_mgr.loadNuscenes()
        self.main_body.annotation_page.setSliderRange(len(self.data_mgr.nusc.sample))